package com.yhyt.health.controller;

import com.alibaba.fastjson.JSON;
import com.yhyt.health.configuration.PathConfiguration;
import com.yhyt.health.model.*;
import com.yhyt.health.result.WebResult;
import com.yhyt.health.util.Page;
import com.yhyt.health.util.WebUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.propertyeditors.CustomDateEditor;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.ServletRequestDataBinder;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.http.HttpServletRequest;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

@Controller
@RequestMapping("/dictPage")
public class DictWebController {
	
	 @Autowired
	 private RestTemplate restTemplate;
	 @Autowired
	 private PathConfiguration pathConfiguration;

	@InitBinder
	protected void initBinder(HttpServletRequest request, ServletRequestDataBinder binder) {
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm ");
		simpleDateFormat.setLenient(false);
		CustomDateEditor dateEditor = new CustomDateEditor(simpleDateFormat, true);
		binder.registerCustomEditor(Date.class,dateEditor);
	}
	
	@RequestMapping("/dictDepartment")
	public String dictDepartment(){
		return "/department/dictDepartmentList";
	}
	
	@RequestMapping("/dictionary")
	public String dictionaryList(){
		return "/dict/dictionaryList";
	}
	
	@RequestMapping("/dictionary/form")
	public ModelAndView dictionaryEdit(Dictionary dictionary){
		ModelAndView model = new ModelAndView();
		model.setViewName("/dict/dictionaryForm");
//		Dictionary dictionary = new Dictionary();
//		dictionary.setId(id);
		model.addObject("dictionary", dictionary);
		return model;
	}
	
	@RequestMapping("/disease")
	public String diseasesList(){
		return "/disease/diseaseList";
	}
	
	@RequestMapping("/disease/form")
	public ModelAndView diseaseEdit(DictDisease disease){
		ModelAndView model = new ModelAndView();
		model.setViewName("/disease/diseaseForm");
		model.addObject("disease", disease);
		return model;
	}
	
	@RequestMapping("/diseaseGroup")
	public String diseaseGroupList(){
		return "/disease/diseaseGroupList";
	}
	
	@RequestMapping("/diseaseGroup/form")
	public ModelAndView diseaseGroupEdit(DictDiseaseGroup diseaseGroup){
		ModelAndView model = new ModelAndView();
		model.setViewName("/disease/diseaseGroupForm");
		model.addObject("diseaseGroup", diseaseGroup);
		return model;
	}
	
	@RequestMapping("/diseaseGroupRelation")
	public ModelAndView diseaseGroupRelationList(DictDiseaseGroupRelation diseaseGroupRelation){
		ModelAndView model = new ModelAndView();
		model.setViewName("/disease/diseaseRelationList");
		model.addObject("diseaseGroupRelation", diseaseGroupRelation);
		return model;
	}
	
	@RequestMapping("/diseaseGroupRelation/form/{dictDiseaseGroupId}")
	public ModelAndView diseaseGroupRelationAdd(DictDiseaseGroupRelation diseaseGroupRelation){
		ModelAndView model = new ModelAndView();
		model.setViewName("/disease/addDiseaseList");
		model.addObject("diseaseGroupRelation", diseaseGroupRelation);
		return model;
	}

	/**
	 * 根据省份 id 查询城市
	 * @param id
	 * @return
	 */
	@RequestMapping("/cities/query/{parentId}")
	@ResponseBody
	public WebResult<DictCity> queryCities(@PathVariable("parentId")long id){
		WebResult<DictCity> result = new WebResult<>();
		try {
			List list = restTemplate.getForObject(pathConfiguration.getSystemUrl()+"/city/?parentId=" + id, List.class);
			result.setList(list);
		} catch (RestClientException e) {
			result.setCode("500");
		}
		return result;

	}

	@RequestMapping("/deptCats/query/{parentCode}")
	@ResponseBody
	public WebResult<DictDepartment> queryDeptCats(@PathVariable("parentCode")String code){
		WebResult<DictDepartment> result = new WebResult<>();
		try {
			List list = restTemplate.getForObject(pathConfiguration.getSystemUrl()+"/dictDepartmentList/" + code, List.class);
			result.setList(list);
		} catch (RestClientException e) {
			result.setCode("500");
		}
		return result;
	}

	@RequestMapping("/upgrade/list")
	public String toUpgradeListPage(){

		return "/upgrade/upgrade-list";
	}

	@RequestMapping("/upgrade/list/get")
	@ResponseBody
	public WebResult<SysUpgrade>  upgradeListPage(UpgradeQuery upgradeQuery){
		WebResult<SysUpgrade> result = new WebResult<>();
		Page upgrades = restTemplate.getForObject(pathConfiguration.getSystemUrl()+"/upgrade/list?queryStr={queryStr}", Page.class, JSON.toJSONString(upgradeQuery));
		result.setCount(upgrades.getTotalRecord());
		result.setList(upgrades.getResult());
		return result;
	}

	@RequestMapping("/upgrade/toAdd")
	public String toAddUpgrade(){

		return "/upgrade/upgrade-add";
	}

	@RequestMapping("/upgrade/add")
	@ResponseBody
	public WebResult<String>  addUpgrade(@RequestBody SysUpgrade sysUpgrade,HttpServletRequest request){
		WebResult<String> result = new WebResult<>();
		HttpHeaders headers = new HttpHeaders();
		headers.setContentType(MediaType.APPLICATION_JSON);
		sysUpgrade.setOperator(WebUtils.getCurrUserName(request));
		HttpEntity<SysUpgrade> doctorHttpEntity = new HttpEntity<>(sysUpgrade, headers);
		try {
			ResponseEntity<Integer> responseEntity = restTemplate.postForEntity(pathConfiguration.getSystemUrl()+"/upgrade/add", doctorHttpEntity, Integer.class);
		} catch (Exception e) {
			result.setCode("500");
		}
		return result;
	}

	@RequestMapping("/upgrade/toEdit/{id}")
	public String toEditUpgrade(@PathVariable("id")long id, Model model){
		ResponseEntity<SysUpgrade> forEntity = restTemplate.getForEntity(pathConfiguration.getSystemUrl()+ "/upgrade/get/" + id, SysUpgrade.class);
		if (forEntity!= null){
			model.addAttribute("upgrade",forEntity.getBody());
		}else
			model.addAttribute("upgrade",new SysUpgrade());

		return "/upgrade/upgrade-edit";
	}

	@RequestMapping("/upgrade/edit")
	@ResponseBody
	public WebResult<String>  editUpgrade(@RequestBody SysUpgrade sysUpgrade,HttpServletRequest request){
		WebResult<String> result = new WebResult<>();
		sysUpgrade.setOperator(WebUtils.getCurrUserName(request));
		try {
			HttpHeaders headers = new HttpHeaders();
			headers.setContentType(MediaType.APPLICATION_JSON);
			sysUpgrade.setOperator(WebUtils.getCurrUserName(request));
			HttpEntity<SysUpgrade> doctorHttpEntity = new HttpEntity<>(sysUpgrade, headers);
			restTemplate.put(pathConfiguration.getSystemUrl()+"/upgrade/update",doctorHttpEntity);
			return result;
		} catch (RestClientException e) {
			result.setCode("500");
		}
		return result;
	}
}
